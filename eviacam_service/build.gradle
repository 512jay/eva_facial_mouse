import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

/* Gets the version name from the latest Git tag */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getVersionCode = { ->
    def versionPropsFile = file('../version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger()

        /* Uncomment for auto-incremental build number */
        /*
        code+= 1
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        */
        return code
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}


android {
    compileSdkVersion 22
    buildToolsVersion "23.0.1"

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set .so files location to libs instead of jniLibs
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    // TODO
    android {
        lintOptions {
            abortOnError false
        }
    }

    defaultConfig {
        applicationId "com.crea_si.eviacam.service"
        minSdkVersion 16
        targetSdkVersion 22

        versionCode getVersionCode()
        versionName getVersionName()

        // ndk {
        //     moduleName "visionpipeline"
        // }
    }


    def ndkProjectPath="src/main"

    // file: local.properties should have something like this:
    // ndk.dir=C\:\\Program_Files\\Android\\android-ndk-r10e
    // sdk.dir=C\:\\Program Files (x86)\\Android\\android-sdk
    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = properties.getProperty('ndk.dir')
        def ndkCmd = ''
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkCmd = 'ndk-build.cmd'
        } else {
            ndkCmd = 'ndk-build'
        }
        commandLine "${ndkDir}/${ndkCmd}",
                "NDK_PROJECT_PATH=${ndkProjectPath}",
                "APP_BUILD_SCRIPT=${ndkProjectPath}/jni/Android.mk",
                "NDK_APPLICATION_MK=${ndkProjectPath}/jni/Application.mk"
    }

    task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'ndk-libs'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'lib/'
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkLibsToJar
    }

    clean.doFirst {
        delete "${ndkProjectPath}/libs"
        delete "${ndkProjectPath}/obj"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}



dependencies {
    compile project(':openCVLibrary2410')
    compile project(':input_method_aidl')
    compile project(':eviacam_api')
    compile 'com.android.support:support-v4:22.2.1'
    compile files('libs/acra-4.6.2.jar')
    compile 'org.codepond:wizardroid:1.3.1'
}
